name: 🌐 Production Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "production"
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: "20.x"

jobs:
  # Pre-deployment checks
  pre-deployment:
    name: 🔍 Pre-deployment Checks
    runs-on: ubuntu-latest

    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Generate version
        id: version
        run: |
          VERSION=$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "🏷️ Version: $VERSION"

      - name: ✅ Deployment check
        id: check
        run: |
          # Check if CI passed
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] || [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # Build for production
  build-production:
    name: 🏗️ Production Build
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: needs.pre-deployment.outputs.should-deploy == 'true'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --ignore-scripts

      - name: 🔨 Build for production
        run: |
          npm run build
          echo "${{ needs.pre-deployment.outputs.version }}" > dist/version.txt
        env:
          CI: true
          NODE_ENV: production

      - name: 🗜️ Compress assets
        run: |
          cd dist
          find . -type f \( -name "*.js" -o -name "*.css" -o -name "*.html" \) -exec gzip -9 -k {} \;
          find . -type f \( -name "*.js" -o -name "*.css" -o -name "*.html" \) -exec brotli -q 11 -k {} \; || echo "brotli not available"

      - name: 📊 Generate build report
        run: |
          echo "## 📊 Build Report" > build-report.md
          echo "**Version:** ${{ needs.pre-deployment.outputs.version }}" >> build-report.md
          echo "**Build time:** $(date)" >> build-report.md
          echo "**Bundle sizes:**" >> build-report.md
          ls -lah dist/assets/ | grep -E '\.(js|css)$' >> build-report.md || echo "No assets found"

      - name: 💾 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build-${{ needs.pre-deployment.outputs.version }}
          path: |
            dist/
            build-report.md
          retention-days: 90

  # GitHub Pages Deployment (current)
  deploy-github-pages:
    name: 🚀 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [pre-deployment, build-production]
    permissions:
      contents: write
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build-${{ needs.pre-deployment.outputs.version }}

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          # CNAME configuration has been removed as it was causing issues
          # cname: your-custom-domain.com

      - name: 🔥 Cache warming
        run: |
          echo "🔥 Warming up caches..."
          sleep 30  # Wait for deployment
          curl -s "${{ steps.deployment.outputs.page_url }}" > /dev/null || echo "Cache warming failed"

  # Future: Vercel/Netlify deployment (commented for now)
  # deploy-vercel:
  #   name: 🚀 Deploy to Vercel
  #   runs-on: ubuntu-latest
  #   needs: [pre-deployment, build-production]
  #   if: false  # Enable when moving to Vercel
  #
  #   steps:
  #     - name: 📥 Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: production-build-${{ needs.pre-deployment.outputs.version }}
  #
  #     - name: 🚀 Deploy to Vercel
  #       uses: amondnet/vercel-action@v25
  #       with:
  #         vercel-token: ${{ secrets.VERCEL_TOKEN }}
  #         vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
  #         vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
  #         working-directory: ./dist

  # Notify deployment status
  notification:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-github-pages]
    if: always()

    steps:
      - name: 📢 Success notification
        if: needs.deploy-github-pages.result == 'success'
        run: |
          echo "🎉 Deployment successful!"
          echo "Version: ${{ needs.pre-deployment.outputs.version }}"
          echo "URL: https://jepeteo.github.io/portfolio/"

      - name: ❌ Failure notification
        if: needs.deploy-github-pages.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "Check the logs for details"
